{"version":3,"sources":["components/Header/GuestInputForm.js","components/Header/index.js","components/MainContent/ConfirmedFilter.js","components/MainContent/Counter.js","components/MainContent/GuestList/GuestName.js","components/MainContent/GuestList/Guest.js","components/MainContent/GuestList/PendingGuest.js","components/MainContent/GuestList/index.js","components/MainContent/index.js","components/App.js","index.js"],"names":["GuestInputForm","_ref","handleSubmit","currentInput","handleInput","react_default","a","createElement","onSubmit","onChange","value","type","placeholder","name","Header","Header_GuestInputForm","ConfirmedFilter","toggleFilter","isFiltered","checked","Counter","numberConfirmed","numberUnconfirmed","numberInvited","className","GuestName","props","isEditing","handleNameEdits","Guest","id","removeSelf","isConfirmed","handleToggleEditing","handleConfirmation","setName","GuestList_GuestName","e","target","onClick","pendingGuest","GuestList","removeGuestAt","guests","toggleEditingAt","toggleConfirmationAt","setNameAt","PendingGuest","filter","guest","map","index","GuestList_Guest","key","text","MainContent","MainContent_ConfirmedFilter","MainContent_Counter","MainContent_GuestList","App","state","generateID","Math","random","console","log","handleNameInput","_this","setState","handleNewGuestSubmit","preventDefault","concat","Object","toConsumableArray","toggleGuestPropertyAt","property","idToChange","objectSpread","defineProperty","idToRemove","getTotalInvited","length","getTotalConfirmed","i","forEach","el","getUnconfirmedGuests","total","confirmed","this","components_Header","components_MainContent","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.a72d0ca7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n    //returns GuestInputForm form\nconst GuestInputForm = ({handleSubmit, currentInput, handleInput}) => {\n    return(\n            //handles submit\n        <form onSubmit = {handleSubmit}>\n            <input onChange = {handleInput} value = {currentInput} type=\"text\" placeholder=\"Invite Someone\" />\n            <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n        </form>\n    );\n}\n\n\nGuestInputForm.propTypes = {\n        //function to handle input, updating pending user state\n    handleInput: PropTypes.func.isRequired,\n    currentInput: PropTypes.string.isRequired,\n    handleSubmit: PropTypes.func.isRequired\n}\nexport default GuestInputForm;","//must be named index.js since it's the parent of the folder\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GuestInputForm from './GuestInputForm'\n\nconst Header = ({handleInput, handleSubmit, currentInput}) => {\n    return(\n        <header>\n            <h1>Tie the Knot</h1>\n            <p>Add Guests Below</p>\n            <GuestInputForm\n                handleInput = {handleInput}\n                currentInput = {currentInput}\n                handleSubmit = {handleSubmit}\n            />\n        </header>\n    );\n}\n\nHeader.propTypes = {\n    handleInput: PropTypes.func.isRequired,\n    currentInput: PropTypes.string.isRequired,\n    handleSubmit: PropTypes.func.isRequired\n}\n\nexport default Header","import React from 'react';\nimport PropTypes from 'prop-types';\n\n    //exports the confirmed filter to app.js\nconst ConfirmedFilter = ({toggleFilter, isFiltered}) => {\n    return(\n        <label>\n            <input \n                type=\"checkbox\" \n                    //runs toggle filter function when checked\n                onChange = {toggleFilter}\n                    //updates UI to match state\n                checked = {isFiltered}\n            /> Hide those who haven't responded\n        </label>\n    );\n}\n\nConfirmedFilter.propTypes = {\n    toggleFilter: PropTypes.func.isRequired,\n    isFiltered: PropTypes.bool.isRequired\n}\n\nexport default ConfirmedFilter;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Counter = ({numberConfirmed, numberUnconfirmed, numberInvited}) => {\n    return(\n        <table className=\"counter\">\n                {/* The data in table comes from functions that scan the isConfirmed guest state */}\n            <tbody>\n                <tr>\n                <td>Attending:</td>\n                <td>{numberConfirmed}</td>\n                </tr>\n                <tr>\n                <td>Unconfirmed:</td>\n                <td>{numberUnconfirmed}</td>\n                </tr>\n                <tr>\n                <td>Total:</td>\n                <td>{numberInvited}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nCounter.propTypes = {\n    numberConfirmed: PropTypes.number.isRequired,\n    numberInvited: PropTypes.number.isRequired,\n    numberUnconfirmed: PropTypes.number.isRequired,\n}\n\nexport default Counter;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n    //returns GuestName cards\nconst GuestName = props => {\n        //if they are editing, return an input\n    \n    if(props.isEditing){\n        return(\n            <input \n                type=\"text\" \n                value = {props.name} \n                onChange = {props.handleNameEdits}\n            />\n        );\n    }\n    return(\n        <span>\n            {/* props.children returns all of the props as content \n            Use it when you wish to render the props, unchanged.  This lets each instance potentially have different content*/}\n\n            {props.name}\n        </span>\n    );\n}\n\nGuestName.propTypes = {\n    isEditing: PropTypes.bool.isRequired,\n    handleNameEdits: PropTypes.func.isRequired\n}\nexport default GuestName;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GuestName from './GuestName'\n\n    //returns guest cards\nconst Guest = ({id, removeSelf, name, isConfirmed, isEditing, handleToggleEditing, handleConfirmation, setName}) => {\n    return(\n        <li className=\"responded\">\n                {/* GuestName component */}\n            <GuestName \n                isEditing = {isEditing}\n                    //receives an event object, uses target.values\n                handleNameEdits = {e => setName(e.target.value)}\n                name = {name}\n            >\n                \n            </GuestName>\n            <label>\n                    {/* onChange listens for changes in value */}\n                <input onChange = {handleConfirmation} type=\"checkbox\" checked = {isConfirmed} /> Confirmed\n            </label>\n                {/* binds func to onClick */}\n            <button onClick = {handleToggleEditing}>\n                    {/* ternary to define edit text */}\n                {isEditing ? \"save\" : \"edit\"}\n            </button>\n            <button onClick = {removeSelf} >remove</button>\n        </li>\n    );\n}\n\n\nGuest.propTypes = {\n    id: PropTypes.number.isRequired,\n    isConfirmed: PropTypes.bool.isRequired,\n    isEditing: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    handleConfirmation: PropTypes.func.isRequired,\n    handleToggleEditing: PropTypes.func.isRequired,\n    setName: PropTypes.func.isRequired,\n    removeSelf: PropTypes.func.isRequired\n}\nexport default Guest;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n    //returns pendingGuest cards\nconst pendingGuest = ({name}) => {\n        //if props.name exists, render a pending card\n        //empty strings are falsy in JS\n    if (name){\n        return(\n            <li className = \"pending\">\n                <span>\n                    {name}\n                </span>\n            </li>\n        );\n    }\n        //if there is no name, return null\n    return null;\n}\n\n\npendingGuest.propTypes = {\n    name: PropTypes.string.isRequired\n}\n\nexport default pendingGuest;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Guest from './Guest';\nimport PendingGuest from './PendingGuest';\n\n    //returns guest cards\nconst GuestList = ({pendingGuest, removeGuestAt, isFiltered, guests, toggleEditingAt, toggleConfirmationAt, setNameAt}) => {\n    return(\n        <ul>\n                {/* calls pending guest component */}\n            <PendingGuest name = {pendingGuest} />\n                {/* filters guest array */}\n            {guests.filter((guest) => {\n                    //if not filtering, or guest is confirmed, guest passes the filter (by returning t)\n                return !isFiltered || guest.isConfirmed;\n            })\n                //map state to cards\n            .map((guest, index) =>\n                <Guest \n                    id = {guest.id}\n                        //this passes the index value into this function via a closure\n                    handleConfirmation = {() => toggleConfirmationAt(guest.id)}\n                        //does the same with the edit function\n                    handleToggleEditing = {() => toggleEditingAt(guest.id)}\n                    name = {guest.name}\n                        //great way to make id from array\n                    key = {guest.id}\n                    isConfirmed = {guest.isConfirmed}\n                    isEditing = {guest.isEditing}\n                    setName = {text => setNameAt(text, guest.id)}\n                        //the empty parameters to pass to this on call prevents the event from being passed\n                        //the index parameter is included via a closure\n                    removeSelf = {() => removeGuestAt(guest.id)}\n                />\n            )}\n        </ul>\n    );\n}\n\n    //verifying proptypes\nGuestList.propTypes = {\n    guests: PropTypes.array.isRequired,\n    toggleConfirmationAt: PropTypes.func.isRequired,\n    toggleEditingAt: PropTypes.func.isRequired,\n    setNameAt: PropTypes.func.isRequired,\n    isFiltered: PropTypes.bool.isRequired,\n    removeGuestAt: PropTypes.func.isRequired,\n    pendingGuest: PropTypes.string.isRequired\n}\nexport default GuestList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ConfirmedFilter from './ConfirmedFilter';\nimport Counter from './Counter';\nimport GuestList from './GuestList';\n\nconst MainContent = ({toggleFilter, isFiltered, numberConfirmed,\n    numberInvited, numberUnconfirmed, toggleConfirmationAt, toggleEditingAt,\n    guests, setNameAt, removeGuestAt, pendingGuest}) => {\n    return(\n       <div className=\"main\">\n        <div>\n            <h2>Invitees</h2>\n            <ConfirmedFilter\n                toggleFilter = {toggleFilter}\n                isFiltered = {isFiltered}\n            />\n        </div>\n            <Counter \n                numberConfirmed = {numberConfirmed}\n                numberInvited = {numberInvited}\n                numberUnconfirmed = {numberUnconfirmed}\n            />\n        <GuestList \n            toggleConfirmationAt = {toggleConfirmationAt}\n            toggleEditingAt = {toggleEditingAt}\n            guests = {guests}\n            setNameAt = {setNameAt}\n            removeGuestAt = {removeGuestAt}\n            pendingGuest = {pendingGuest}\n            isFiltered = {isFiltered}\n        />\n    </div>\n    );\n}\n\nMainContent.propTypes = {\n        //for ConfirmedFilter\n    toggleFilter: PropTypes.func.isRequired,\n    isFiltered: PropTypes.bool.isRequired,\n\n        //for Counter\n    numberConfirmed: PropTypes.number.isRequired,\n    numberInvited: PropTypes.number.isRequired,\n    numberUnconfirmed: PropTypes.number.isRequired,\n\n    //for GuestList\n    toggleConfirmationAt: PropTypes.func.isRequired,\n    toggleEditingAt: PropTypes.func.isRequired,\n    guests: PropTypes.array.isRequired,\n    setNameAt: PropTypes.func.isRequired,\n    removeGuestAt: PropTypes.func.isRequired,\n    pendingGuest: PropTypes.string.isRequired\n\n}\nexport default MainContent;","import React, {Component} from 'react';\nimport '../css/style.css';\n\nimport Header from './Header';\nimport MainContent from './MainContent';\n\n    class App extends Component{\n\n        //adding a feature to create a new guest:\n\n        //I'll need a method to add a guest by setting the state of guests.\n            //it will need a function that gets the text value of the input field when submit is clicked.  \n            //Then, I want for the text value of the field to be set to blank.\n        //I will need a new guest to be added to the end of the guest array.  \n        //the name will be the value received from the input function, isConfirmed will be set to false, and isEditing will be set to false.\n\n        //this method will need to be defined in the App component.  \n        //I'll pass it into a new component (Create Guest) as a prop, and attach it to the submit button, onClick.\n\n            //don't have a state that can be derived from another state.\n        state = {\n            isFiltered: false,\n            pendingGuest: \"\",\n            guests: []\n        }   \n\n\n            \n            //pass ID as a prop into the guest component\n            //replace index with ID whenever a specific component is referred to\n\n\n        generateID = () => {\n            let id = Math.random();\n            console.log(id);\n            return id;\n        }\n\n            //input here comes from the closure created when the prop is passed.\n            //the closure gives access to target.value\n\n            //handles name input for creating new guest\n        handleNameInput = (e) => {\n            this.setState({\n                pendingGuest: e.target.value\n            });\n        }\n\n            //handles updating guest state to include new guest\n        handleNewGuestSubmit = (e) => {\n                //stops submit from hard refreshing the page\n            e.preventDefault();\n            this.setState({\n                guests: [\n                        //creates new guest\n                    {   \n                        name: this.state.pendingGuest,\n                        isConfirmed: false,\n                        isEditing: false,\n                        id: this.generateID()\n                    },\n                        //spreads the remaining guests into the new guest state\n                    ...this.state.guests\n                ],\n                pendingGuest: \"\"\n            })\n        }\n\n            //takes in a property, and index to change, sets state\n        toggleGuestPropertyAt = (property, idToChange) => {\n            this.setState({\n                //maps guests to new array\n                guests: this.state.guests.map((guest) => {\n                    //returns matching index number as opposite boolean\n                    if (guest.id === idToChange) {\n                        return {\n                            //spreads remaining properties\n                            ...guest,\n                                //feature to be toggled\n                            [property]: !guest[property]   //computed property name\n                        }\n                    }\n                    //if it's not the targeted item, return it unchanged\n                    return guest;\n                })\n            });\n        }\n\n            //toggles confirmation\n        toggleConfirmationAt = index => {\n            this.toggleGuestPropertyAt(\"isConfirmed\", index)\n        }\n\n            //removes guest  Index is passed down through a closure in GuestList\n        removeGuestAt = idToRemove => {\n            this.setState({\n                    //filters guests by having a different id than the targeted one\n                guests: this.state.guests.filter(guest => idToRemove !== guest.id)\n            });\n        }\n            //uses parent function to set state\n        toggleEditingAt = id => {\n            this.toggleGuestPropertyAt(\"isEditing\", id)\n        }\n\n            //toggles the filter for guest items\n        toggleFilter = () => {\n            this.setState({\n                isFiltered: !this.state.isFiltered\n            })\n        }\n\n\n            //returns number invited\n        getTotalInvited = () => this.state.guests.length;\n\n            //gets number confirmed\n        getTotalConfirmed = () => {\n                //counter for guests\n            let i = 0;\n            this.state.guests.forEach(el => {\n                if(el.isConfirmed === true){\n                    i++\n                } \n            });\n            return i;\n        }\n            //get total unconfirmed\n        getUnconfirmedGuests = (total, confirmed) => {\n            return (total - confirmed);\n        }\n\n            //sets name of guest when edited\n         setNameAt = (name, idToChange) => {\n             this.setState({\n                    //maps guests to new array\n                 guests: this.state.guests.map((guest) => {\n                        //checks guest's id number to parameter id\n                     if (guest.id === idToChange) {\n                         return {\n                                //spreads remaining properties\n                             ...guest,\n                                //name to be changed\n                             name \n                         }\n                     }\n                     //if it's not the targeted item, return it unchanged\n                     return guest;\n                 })\n             });\n         }\n\n        render(){\n                //these values are set here so that they can be passed to Counter as numbers\n            const numberInvited = this.getTotalInvited();\n            const numberConfirmed = this.getTotalConfirmed();\n            const numberUnconfirmed = this.getUnconfirmedGuests(numberInvited, numberConfirmed);\n\n            return(\n                <div className=\"App\">\n                    <Header\n                        handleInput = {this.handleNameInput}\n                        currentInput = {this.state.pendingGuest}\n                        handleSubmit = {this.handleNewGuestSubmit}\n                    />\n                    <MainContent\n                            //for ConfirmedFilter\n                        toggleFilter = {this.toggleFilter}\n                        isFiltered = {this.state.isFiltered}\n\n                            //for Counter\n                        numberConfirmed = {numberConfirmed}\n                        numberInvited = {numberInvited}\n                        numberUnconfirmed = {numberUnconfirmed}\n                            //for GuestList\n                        toggleConfirmationAt = {this.toggleConfirmationAt}\n                        toggleEditingAt = {this.toggleEditingAt}\n                        guests = {this.state.guests}\n                        setNameAt = {this.setNameAt}\n                        removeGuestAt = {this.removeGuestAt}\n                        pendingGuest = {this.state.pendingGuest}\n                    />\n                </div>\n            );\n        }\n    }\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}