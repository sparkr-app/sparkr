EVENT LISTENERS

    EVENT HANDLER PROPERTIES
        these exist so that you can assign code to them that will run when they are fired. 
            i.e. 
                var btn = document.querySelector('button');
                btn.onclick = function(){
                    //code here gets executed when html class 'button' is clicked
                }
                
            You can also set an event handler property to be equal to an already created function  
                i.e. btn.onclick = randomizeContent();
                don't use inline (in html) event handlers.  They are a bad practice

    ADD EVENT LISTENER SYNTAX

        addEventListener('event name', code to be executed when called) //can simply be a function


    FLEXBOX

        justify content stretches in the same way that the flex crossbow aims
        align items (the alignment lasers) work in a perpendicular manner

        order:
        display: flex;
        flex-direction: direction;
        justify-content: location;
        align-items: location;

    TEMPLATE LITERALS
        `string text`

            `string text line 1
            string text line 2`

            `string text ${expression} string text`

            tag `string text ${expression} string text`

        //they allow embededed expressions inside of a string 
            i.e. 
            var a = 10;
            var b = 5;
            `'fifteen is' + (a + b) + 'and not' (2* a+b) + '.';


    CSS TRANSITIONS:
        used to change an attribute as an animation.
        SYNTAX
        transition: property (can be all) time (something like .5s)

    ARROW FUNCTION 

    Instead of
                    function foo(params) {
                        return params + 2;
                        }
                        funcName(2);
                        // 4

                        var foo = (params) => params + 2
                        funcName(2);
                        // 4

    SYNTAX = (parameters) => {statements}
    if no param, then () => {statements}
    if one param, you can use param => {statements}
        i.e. 
            var double = num => num * 2;
                //double(2);
                //4